/*
 * EXTENSIONS
 */
var jade = require('jade')
	, async = require('async')
	, <%=model.name %>Model = require('../models/<%=model.name %>.js');

/*
 * MODELS
 */
var <%=model.nameCap %> = <%=model.name %>Model.get<%=model.nameCap %>();

/*
 * [GET] FORM CREATE AN ENTRY FOR <%=model.nameCap %>
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.getNew<%=model.nameCap %>Form = function(req, res) {
	res.status(200).render('<%=model.name %>/create');
};

/*
 * [POST] CREATE AN ENTRY FOR <%=model.nameCap %>
 *
<% model.fields.forEach(function(field){ -%>
<% 	if(field.type != 'Json'){ -%>
 * @param <%=field.type %> <%=field.name %>
<% 	} -%>
<% }) -%>
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.post<%=model.nameCap %> = function(req, res)
{
	var data = req.body;

	var status = 200;
	var format = 'html';

	var <%=model.name %> = null;

	async.series([

		function(callback)
		{
			if(data == null)
			{
				status = 400;
				callback(true);
			}
<% model.fields.forEach(function(field){ -%>
<%	if(field.type != 'Json'){ -%>
			else if(data.<%=field.name %> === undefined)
			{
				status = 400;
				callback(true);
			}
<%	} -%>
<% }) -%>
			else
			{
				if(req.query.format != null && req.query.format == 'json')
					format = req.query.format;
				callback();
			}
		},
<%
var uniques = 0;
model.fields.forEach(function(field) {
	if(field.unique !== undefined)
		uniques++;
}) -%>
<% if(uniques > 0){ -%>
<% var gone = 0; -%>
		function(callback)
		{
			<%=model.nameCap %>
			.findOne({
				$or : [
<% for(var i=0; i<model.fields.length; i++){
		if(model.fields[i].unique !== undefined){
			gone++;
			if(gone >= uniques) { -%>
					{ <%=model.fields[i].name %> : data.<%=model.fields[i].name %> }
<%		} else { -%>
					{ <%=model.fields[i].name %> : data.<%=model.fields[i].name %> },
<%		}
		}
	 } -%>
				]
			})
			.exec(function(err, retData)
			{
				if(retData != null)
				{
					status = 400;
					callback(true);
				}
				else
				{
					callback();
				}
			});
		},
<% } -%>
		function(callback)
		{
			<%=model.name %> = new <%=model.nameCap %>({
				name : data.name,
				<%=model.name %>name : data.<%=model.name %>name,
				email : data.email,
				password : data.password,
				age : data.age,
			});

			<%=model.name %>.save(function(err, retData)
			{
				<%=model.name %> = retData;

				if(err != null)
				{
					status = 400;
					callback(true);
				}

				callback();
			});
		}
	], function(invalid)
	{
		if(format == 'json')
			res.status(status).send(<%=model.name %>);
		else
		{
			if(status != 200)
				res.status(200).render('<%=model.name %>/create', { error : true });
			else
				res.status(status).render('<%=model.name %>/get-single', { <%=model.name %> : <%=model.name %> });
		}
	});
};

/*
 * [GET] FORM CREATE AN ENTRY OF DEVICES FOR <%=model.nameCap %>
 *
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.getNewInternDevicesForm = function(req, res)
{
	var id = req.params.id;

	<%=model.nameCap %>
	.findOne({ _id : id })
	.exec(function(err, retData)
	{
		if(retData == null)
			res.status(404).render('<%=model.name %>/not-found');
		else
			res.status(200).render('<%=model.name %>/create-devices', { <%=model.name %> : retData });
	});
};

/*
 * [POST] CREATE AN ENTRY OF DEVICES FOR <%=model.nameCap %>
 *
 * @param String model
 * @param Number color
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.postNewInternDevicesForm = function(req, res)
{
	var id = req.params.id;
	var data = req.body;

	var status = 200;
	var format = 'html';

	var <%=model.name %> = null;

	async.series([

		function(callback)
		{
			if(data == null)
			{
				status = 400;
				callback(true);
			}
			else if(data.model === undefined)
			{
				status = 400;
				callback(true);
			}
			else if(data.color === undefined)
			{
				status = 400;
				callback(true);
			}
			else
			{
				if(req.query.format != null && req.query.format == 'json')
					format = req.query.format;
				callback();
			}
		},
		function(callback)
		{
			<%=model.nameCap %>
			.findOne({ _id : id })
			.exec(function(err, retData)
			{
				if(retData == null)
				{
					status = 400;
					callback(true);
				}
				else
				{
					<%=model.name %> = retData;

					callback();
				}
			});
		},
		function(callback)
		{
			var devices = {};

			devices.model = data.model;
			devices.color = data.color;

			if(<%=model.name %>.devices === undefined)
				<%=model.name %>.devices = [];

			<%=model.name %>.devices.push(devices);

			callback();
		},
		function(callback)
		{
			<%=model.name %>.save(function(err, retData)
			{
				<%=model.name %> = retData;

				callback();
			});
		}
	], function(invalid)
	{
		if(format == 'json')
			res.status(status).send(<%=model.name %>);
		else
			res.redirect('/<%=model.name %>/'+<%=model.name %>._id);
	});
};

/*
 * [GET] GET SINGLE ENTRY FOR <%=model.nameCap %>
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.get<%=model.nameCap %> = function(req, res)
{
	var id = req.params.id;
	var status = 200;
	var format = 'html';

	var <%=model.name %> = null;

	async.series([

		function(callback)
		{
			if(req.query.format != null && req.query.format == 'json')
				format = req.query.format;
			callback();
		},
		function(callback)
		{
			<%=model.nameCap %>
			.findOne({ _id : id })
			.exec(function(err, retData)
			{
				if(retData == null)
				{
					status = 400;
					callback(true);
				}
				else
				{
					<%=model.name %> = retData;

					callback();
				}
			});
		}

	], function(invalid)
	{
		if(format == 'json')
			res.status(status).send(<%=model.name %>);
		else
		{
			if(invalid)
				res.status(status).render('<%=model.name %>/not-found');
			else
				res.status(status).render('<%=model.name %>/get-single', { <%=model.name %> : <%=model.name %> });
		}
	});
};

/*
 * [GET] GET ALL ENTRIES FOR <%=model.nameCap %>
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.get<%=model.nameCap %>s = function(req, res)
{
	var status = 200;
	var format = 'html';

	var <%=model.name %>s = null;

	async.series([

		function(callback)
		{
			if(req.query.format != null && req.query.format == 'json')
				format = req.query.format;
			callback();
		},
		function(callback)
		{
			<%=model.nameCap %>
			.find()
			.exec(function(err, retData)
			{
				<%=model.name %>s = retData;

				callback()
			});
		}

	], function(invalid)
	{
		if(format == 'json')
			res.status(status).send(<%=model.name %>s);
		else
			res.status(status).render('<%=model.name %>/get-all', { <%=model.name %>s : <%=model.name %>s });
	});
};

/*
 * [GET] FORM EDIT AN ENTRY FOR <%=model.nameCap %>
 *
 *
 * @return View
 */
exports.getEdit<%=model.nameCap %>Form = function(req, res)
{
	var id = req.params.id;

	<%=model.nameCap %>
	.findOne({ _id : id })
	.exec(function(err, retData)
	{
		if(retData == null)
			res.status(404).render('<%=model.name %>/not-found');
		else
			res.status(200).render('<%=model.name %>/update', { <%=model.name %> : retData });
	});
};

/*
 * [PUT] EDIT AN ENTRY FOR <%=model.nameCap %>
 *
 * @param [opt] String name
 * @param [opt] String <%=model.name %>name
 * @param [opt] String email
 * @param [opt] String password
 * @param [opt] Number age
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.put<%=model.nameCap %> = function(req, res)
{
	var id = req.params.id;
	var data = req.body;

	var status = 200;
	var format = 'html';

	var <%=model.name %> = null;

	async.series([

		function(callback)
		{
			if(data == null)
			{
				status = 400;
				callback(true);
			}
			else
			{
				if(req.query.format != null && req.query.format == 'json')
					format = req.query.format;
				callback();
			}
		},
		function(callback)
		{
			<%=model.nameCap %>
			.findOne({ _id : id })
			.exec(function(err, retData)
			{
				if(retData == null)
				{
					status = 400;
					callback(true);
				}
				else
				{
					<%=model.name %> = retData;

					callback();
				}
			});
		},
		function(callback)
		{
			if(data.name !== undefined)
			{
				<%=model.name %>.name = data.name;
			}
			if(data.<%=model.name %>name !== undefined)
			{
				<%=model.name %>.<%=model.name %>name = data.<%=model.name %>name;
			}
			if(data.email !== undefined)
			{
				<%=model.name %>.email = data.email;
			}
			if(data.password !== undefined)
			{
				<%=model.name %>.password = data.password;
			}
			if(data.age !== undefined)
			{
				<%=model.name %>.age = data.age;
			}

			callback();
		},
		function(callback)
		{
			<%=model.nameCap %>
			.findOne({
				$or : [
					{ <%=model.name %>name : data.<%=model.name %>name },
					{ email : data.email }
				]
			})
			.exec(function(err, retData)
			{
				if(retData != null)
				{
					if(!retData._id.equals(<%=model.name %>._id))
					{
						status = 400;
						callback(true);
					}
					else
					{
						callback();
					}
				}
				else
				{
					callback();
				}
			});
		},
		function(callback)
		{
			<%=model.name %>.save(function(err, retData)
			{
				<%=model.name %> = retData;

				callback();
			});
		}
	], function(invalid)
	{
		if(format == 'json')
			res.status(status).send(<%=model.name %>);
		else
			res.status(status).render('<%=model.name %>/get-single', { <%=model.name %> : <%=model.name %> });
	});
};

/*
 * [DELETE] DELETE AN ENTRY FOR <%=model.nameCap %>
 *
 * @return null
 */
exports.delete<%=model.nameCap %> = function(req, res)
{
	var id = req.params.id;
	var status = 200;
	var format = 'html';

	var <%=model.name %> = null;

	async.series([

		function(callback)
		{
			if(req.query.format != null && req.query.format == 'json')
				format = req.query.format;
			callback();
		},
		function(callback)
		{
			<%=model.nameCap %>
			.findOne({ _id : id })
			.exec(function(err, retData)
			{
				if(retData == null)
				{
					status = 400;
					callback(true);
				}
				else
				{
					<%=model.name %> = retData;

					callback();
				}
			});
		},
		function(callback)
		{
			<%=model.name %>.remove(function(err, retData)
			{
				callback();
			});
		}
	], function(invalid)
	{
		if(format == 'json')
			res.status(status).send('');
		else
			res.status(status).render('<%=model.name %>/delete');
	});
};

/*
 * [DELETE] DELETE AN ENTRY OF DEVICES FOR <%=model.nameCap %>
 *
 *
 * @return <%=model.nameCap %> <%=model.name %>
 */
exports.deleteInternDevices = function(req, res)
{
	var id = req.params.id;
	var index = req.params.index;
	var status = 200;
	var format = 'html';

	var <%=model.name %> = null;

	async.series([

		function(callback)
		{
			if(req.query.format != null && req.query.format == 'json')
				format = req.query.format;
			callback();
		},
		function(callback)
		{
			<%=model.nameCap %>
			.findOne({ _id : id })
			.exec(function(err, retData)
			{
				if(retData == null)
				{
					status = 400;
					callback(true);
				}
				else
				{
					<%=model.name %> = retData;

					callback();
				}
			});
		},
		function(callback)
		{
			<%=model.name %>.devices.splice(index, 1);

			<%=model.name %>.save(function(err, retData)
			{
				<%=model.name %> = retData;

				callback();
			});
		}
	], function(invalid)
	{
		if(format == 'json')
			res.status(status).send(<%=model.name %>);
		else
			res.redirect('/<%=model.name %>/'+<%=model.name %>._id);
	});
};

